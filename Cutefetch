#!/usr/bin/env bash
# ------------------------------------------------------------------- #
#
# Tiny coloured fetch script with cute little animals
#
# Authored by: elenapan  (https://github.com/elenapan )
# Modified by: strafe    (https://github.com/strafe )
# Modified by: cybardev  (https://github.com/cybardev )
# And others: https://github.com/cybardev/cutefetch/graphs/contributors
# Modified by: sam-ozak
# ------------------------------------------------------------------- #

readonly VERSION_INFO="v3.0.2"

# ---------------------------- Utilities ---------------------------- #

help_info() {
    echo "Cutefetch - Tiny coloured fetch script to display sysinfo"
    echo ""
    echo "USAGE: $(basename "$0") [-m MODE] [-e EYES] [-r] [-v] [-h]"
    echo ""
    echo "    [MODE]:"
    echo "        cat, kitty, bunny, dog, penguin, etc."
    echo "    [EYES]:"
    echo "        Numbers from 0 to 15 for eye styles"
    echo "    [-r]            : Use randomized ASCII art"
    echo "    [-v]            : Print the version number"
    echo "    [-h]            : Print this help message"
    echo ""
    echo "    [No option]     : Defaults to: $(basename "$0") -m cat -e 6"
    echo ""
}

# Set the eyes (default: ^.^)
eyes() {
    case "$1" in
        0) echo ". ." ;;
        1) echo "· ·" ;;
        2) echo "^ ^" ;;
        3) echo "- -" ;;
        4) echo "~ ~" ;;
        5) echo "* *" ;;
        6) echo "^.^" ;;
        7) echo "-.-" ;;
        8) echo "~.~" ;;
        9) echo "*.*" ;;
        10) echo "0.0" ;;
        11) echo "0 0" ;;
        12) echo "o o" ;;
        13) echo "o.o" ;;
        14) echo "° o" ;;
        *) echo "^.^" ;; # Default eyes
    esac
}

# ------------------------- Info Collectors ------------------------- #

init() {
    # Ensure the required font is installed
    if ! fc-list | grep -qi "Nerd Font"; then
        echo -e "\e[31m[ERROR] Nerd Font (e.g., Fira Code Nerd Font) not installed. Please install it to display icons correctly.\e[0m"
    fi

    # Store color codes in variables
    for i in {0..7}; do
        printf -v "c${i}" '%b' "\e[3${i}m"
    done

    readonly d=$'\e[1m'
    readonly t=$'\e[0m'
    readonly v=$'\e[7m'

    # Icons for the sysinfo
    readonly w="♥"
    readonly k=""
    readonly s=""
    readonly u="⏱"
    readonly b=""

    # System information
    case "$(uname -s)" in
        Linux*)
            readonly wm="$(xprop -id "$(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}')" -notype -f _NET_WM_NAME 8t | grep -m 1 "WM_NAME" | cut -f2 -d \")"
            readonly kern="$(uname -r | cut -f1 -d '-')"
            readonly shell=$(basename "$SHELL")

            # Get uptime in short format
            readonly uval="$(uptime -p | sed 's/up //; s/ minutes/m/g; s/ minute/m/g; s/ hours/h/g; s/ hour/h/g; s/ days/d/g; s/ day/d/g')"

            # Battery info: percentage + remaining time (only if discharging)
            if [ -d "/sys/class/power_supply/" ]; then
                BAT=$(ls /sys/class/power_supply/ | grep -i bat)
                if [ "$BAT" ]; then
                    CAPACITY=$(cat /sys/class/power_supply/"$BAT"/capacity)
                    STATUS=$(cat /sys/class/power_supply/"$BAT"/status)

                    BATTERY_INFO="$CAPACITY%"

                    if [[ "$STATUS" == "Discharging" && "$CAPACITY" -lt 100 ]]; then
                        ENERGY=$(cat /sys/class/power_supply/"$BAT"/energy_now)
                        POWER=$(cat /sys/class/power_supply/"$BAT"/power_now)

                        if (( POWER > 0 )); then
                            REMAINING_MINUTES=$(( ENERGY * 60 / POWER / 1000000 ))

                            HOURS=$(( REMAINING_MINUTES / 60 ))
                            MINS=$(( REMAINING_MINUTES % 60 ))
                            TIME_STR=""
                            [[ "$HOURS" -gt 0 ]] && TIME_STR+="${HOURS}h "
                            [[ "$MINS" -gt 0 ]] && TIME_STR+="${MINS}m"
                            BATTERY_INFO+=" ($TIME_STR)"
                        fi
                    fi
                    readonly bval="$BATTERY_INFO"
                else
                    readonly bval="N/A"
                fi
            else
                readonly bval="N/A"
            fi
            ;;
        Darwin*)
            readonly bval="macOS: N/A"
            ;;
        *)
            readonly bval="N/A"
            ;;
    esac

    tput clear
}

# (The rest of the script remains the same...)
